*GitHub Repository "qdrant/qdrant_demo"*

'''--- .github/workflows/deploy.yaml ---
# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - name: Build backend
      run: |
        cd $GITHUB_WORKSPACE
        docker build -t qdrant/search-demo:${{ github.sha }} .
        docker save -o qdrant-search-demo.tar qdrant/search-demo:${{ github.sha }}
        ls -al .

    - name: copy data with ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        source: "qdrant-search-demo.tar"
        target: "deployment/data"

    - name: run images
      uses: fifsky/ssh-action@master
      with:
        command: |
          containerName=search-demo
          docker load -i deployment/data/qdrant-search-demo.tar;
          docker images;
          docker kill $containerName || true;
          docker rm $containerName || true;
          docker run -d -p 8000:8000 --restart unless-stopped \
                    --network=qdrant-net \
                    -e OPENBLAS_NUM_THREADS=1 \
                    -e OMP_NUM_THREADS=1 \
                    -e QDRANT_URL=${{ secrets.QDRANT_URL }} \
                    -e QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }} \
                    -e QDRANT_COLLECTION=${{ secrets.QDRANT_COLLECTION }} \
                    --name $containerName qdrant/search-demo:${{ github.sha }};
        host: ${{ secrets.DEPLOY_HOST }}
        user: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}

'''
'''--- README.md ---

# Neural search demo 
## With Qdrant + BERT + FastAPI

This repository contains a code for Neural Search for startups [demo](https://demo.qdrant.tech).

The demo is based on the vector search engine [Qdrant](https://github.com/qdrant/qdrant).

## Requirements
Install python requirements:

```
pip install poetry
poetry install
```

You will also need [Docker](https://docs.docker.com/get-docker/) and [docker-compose](https://docs.docker.com/compose/install/)

## Quick Start <a href="https://replit.com/new/github/qdrant/qdrant_demo"><img align="right" src="https://replit.com/badge/github/qdrant/qdrant_demo" alt="Run on Repl.it"></a>

To launch this demo locally you will need to download data first.

The source of the original data is [https://www.startups-list.com/](https://www.startups-list.com/)

You can download the data via the following command:

```bash
wget https://storage.googleapis.com/generall-shared-data/startups_demo.json -P data/
```

To launch service locally, use

```
docker-compose -f docker-compose-local.yaml up
```

After service is started you can upload initial data to the search engine.

```
# Init neural index
python -m qdrant_demo.init_collection_startups
```

After a successful upload, neural search API will be available at [http://localhost:8000/docs](http://localhost:8000/docs) 

You can play with the data in the following [Colab Notebook](https://colab.research.google.com/drive/1kPktoudAP8Tu8n8l-iVMOQhVmHkWV_L9?usp=sharing).

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1kPktoudAP8Tu8n8l-iVMOQhVmHkWV_L9?usp=sharing)

## Start with Crunchbase data

Alternatively, you can use larger dataset of companies provided by [Crunchbase](https://www.crunchbase.com/).

You will need to register at [https://www.crunchbase.com/](https://www.crunchbase.com/) and get an API key.

```bash
# Download data
wget 'https://api.crunchbase.com/odm/v4/odm.tar.gz?user_key=<CRUNCHBASE-API-KEY>' -O odm.tar.gz
```

Decompress data and put `organizations.csv` into `./data` folder.

```bash
# Decompress data
tar -xvf odm.tar.gz
mv odm/organizations.csv ./data
```

After that, you can run indexing of Crunchbase data into Qdrant.

```bash
# Init neural index
python -m qdrant_demo.init_collection_crunchbase
```

'''
'''--- docker-compose-local.yaml ---
version: '3.7'

services:
  web:
    build: .
    container_name: qdrant_demo_web
    ports:
      - "8000:8000"
    depends_on:
      - qdrant
    environment:
      - QDRANT_URL=http://qdrant_demo_qdrant:6333

  qdrant:
    container_name: qdrant_demo_qdrant
    image: qdrant/qdrant:v1.7.3
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant_storage:/qdrant/storage

'''
'''--- docker-compose.yaml ---
version: '3.7'

services:
  web:
    build: .
    container_name: qdrant_demo_web
    ports:
      - 8000:8000

'''
'''--- frontend/.env ---
VITE_QDRANT_DEMO_URL="https://demo.qdrant.tech"

'''
'''--- frontend/.eslintrc.cjs ---
const path = require('path');

const tsconfigPath = path.join(__dirname, 'tsconfig.json');

module.exports = {
	env: { browser: true, es2020: true },
	parser: '@typescript-eslint/parser',
	parserOptions: { ecmaVersion: 'latest', sourceType: 'module', project: [tsconfigPath] },
	plugins: ['react-refresh'],
	extends: [
		'eslint:recommended',
		'plugin:@typescript-eslint/recommended',
		'plugin:react-hooks/recommended',
		'plugin:react/recommended',
		'plugin:import/typescript',
		'plugin:prettier/recommended',
	],
	rules: {
		'react-refresh/only-export-components': 'warn',
		'react/react-in-jsx-scope': 0,
		'react-refresh/only-export-components': 0,
		'react-hooks/exhaustive-deps': 0,
	},
	settings: {
		react: {
			version: 'detect',
		},
	},
};

'''
'''--- frontend/README.md ---
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
   parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
   },
```

- Replace `plugin:@typescript-eslint/recommended` to `plugin:@typescript-eslint/recommended-type-checked` or `plugin:@typescript-eslint/strict-type-checked`
- Optionally add `plugin:@typescript-eslint/stylistic-type-checked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and add `plugin:react/recommended` & `plugin:react/jsx-runtime` to the `extends` list

'''
'''--- frontend/build_and_sync.sh ---
#!/usr/bin/env bash

pnpm run build

rsync -avP ./dist/ $1:./project/web-deployment/public/demo/

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logoFavicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Semantic Search Demo - Qdrant</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

'''
'''--- frontend/package.json ---
{
  "name": "frontend_v2",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@mantine/core": "^6.0.19",
    "@mantine/hooks": "^6.0.19",
    "@tabler/icons-react": "^2.32.0",
    "@vitejs/plugin-react-swc": "^3.3.2",
    "axios": "^1.5.0",
    "dompurify": "^3.0.5",
    "http-status-codes": "^2.2.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/dompurify": "^3.0.2",
    "@types/ms": "^0.7.31",
    "@types/node": "^20.3.2",
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}

'''
'''--- frontend/public/logo.svg ---
<svg width="1211" height="144" viewBox="0 0 1211 144" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_53_1404)">
<path d="M200.648 92.8924C200.648 95.7916 198.298 98.1422 195.399 98.1422H191.81V94.0436H191.682C191.298 94.5984 190.786 95.1748 190.145 95.7722C189.547 96.3275 188.822 96.8399 187.968 97.3097C187.157 97.779 186.239 98.1632 185.214 98.4625C184.232 98.7611 183.207 98.9102 182.14 98.9102C179.835 98.9102 177.743 98.526 175.864 97.7575C173.985 96.9464 172.363 95.8362 170.997 94.4273C169.673 92.9758 168.649 91.2682 167.923 89.3045C167.197 87.3401 166.834 85.1842 166.834 82.8362C166.834 80.6588 167.154 78.5879 167.795 76.6236C168.478 74.6173 169.417 72.8451 170.613 71.3081C171.851 69.7714 173.345 68.5546 175.096 67.658C176.846 66.7187 178.831 66.2491 181.051 66.2491C183.058 66.2491 184.915 66.5693 186.623 67.2097C188.374 67.8074 189.804 68.8534 190.914 70.348H191.042V54.9758C191.042 52.0767 193.392 49.7265 196.291 49.7265H200.648V92.8924ZM191.81 82.5795C191.81 80.2315 191.128 78.3318 189.761 76.8798C188.438 75.4283 186.559 74.7024 184.125 74.7024C181.692 74.7024 179.792 75.4283 178.426 76.8798C177.102 78.3318 176.44 80.2315 176.44 82.5795C176.44 84.9281 177.102 86.8278 178.426 88.2793C179.792 89.7312 181.692 90.4572 184.125 90.4572C186.559 90.4572 188.438 89.7312 189.761 88.2793C191.128 86.8278 191.81 84.9281 191.81 82.5795Z" fill="#DC244C"/>
<path d="M206.863 72.2667C206.863 69.3678 209.214 67.0176 212.113 67.0176H216.47V72.0126H216.598C217.623 70.0916 218.839 68.6613 220.248 67.722C221.657 66.74 223.429 66.2491 225.564 66.2491C226.119 66.2491 226.673 66.2704 227.229 66.3131C227.784 66.3558 228.296 66.4412 228.766 66.5693V75.343C228.082 75.1294 227.399 74.9798 226.717 74.8942C226.076 74.7661 225.393 74.7021 224.667 74.7021C222.831 74.7021 221.38 74.9583 220.312 75.4706C219.245 75.9829 218.412 76.7089 217.815 77.648C217.259 78.5446 216.897 79.6333 216.726 80.9142C216.555 82.1955 216.47 83.6039 216.47 85.1409V92.8921C216.47 95.7913 214.12 98.142 211.22 98.142H206.863V72.2667Z" fill="#DC244C"/>
<path d="M252.066 94.2362H251.938C250.87 95.9013 249.44 97.0966 247.647 97.8226C245.897 98.548 244.039 98.9108 242.075 98.9108C240.624 98.9108 239.215 98.6976 237.848 98.2709C236.525 97.8866 235.351 97.2887 234.326 96.4777C233.301 95.6661 232.49 94.663 231.892 93.4672C231.295 92.2719 230.996 90.8845 230.996 89.305C230.996 87.5118 231.316 85.9958 231.956 84.758C232.64 83.5197 233.536 82.495 234.646 81.684C235.799 80.8724 237.101 80.2535 238.553 79.8268C240.005 79.3569 241.499 79.0152 243.036 78.8016C244.616 78.5884 246.174 78.4604 247.711 78.4173C249.291 78.3748 250.742 78.3538 252.066 78.3538C252.066 76.6457 251.447 75.3008 250.208 74.3186C249.013 73.294 247.583 72.7816 245.918 72.7816C244.338 72.7816 242.887 73.1234 241.563 73.8063C240.282 74.4472 239.129 75.3438 238.104 76.4961L232.981 71.2446C234.774 69.5798 236.867 68.3416 239.257 67.5304C241.648 66.6765 244.124 66.2496 246.686 66.2496C249.504 66.2496 251.809 66.6125 253.603 67.3383C255.439 68.0214 256.89 69.0461 257.957 70.4121C259.068 71.7785 259.836 73.4651 260.263 75.4714C260.69 77.4357 260.903 79.7197 260.903 82.3239V92.8934C260.903 95.7921 258.553 98.1428 255.654 98.1428H252.066V94.2362ZM249.696 84.5013C248.971 84.5013 248.052 84.5444 246.942 84.6294C245.875 84.6724 244.829 84.843 243.804 85.1417C242.823 85.4409 241.968 85.8892 241.243 86.4866C240.56 87.0845 240.218 87.9171 240.218 88.9848C240.218 90.1375 240.709 90.9911 241.691 91.5459C242.673 92.1013 243.698 92.3785 244.765 92.3785C245.704 92.3785 246.601 92.2504 247.455 91.9942C248.351 91.7381 249.141 91.3753 249.824 90.9055C250.508 90.4362 251.041 89.8383 251.425 89.1123C251.852 88.3869 252.066 87.5328 252.066 86.5512V84.5013H249.696Z" fill="#DC244C"/>
<path d="M267.572 72.2667C267.572 69.3678 269.922 67.0176 272.821 67.0176H276.794V71.2441H276.922C277.221 70.6467 277.648 70.0489 278.203 69.4512C278.758 68.8534 279.42 68.3198 280.188 67.8501C280.957 67.3805 281.832 66.9962 282.814 66.6974C283.796 66.3985 284.863 66.2491 286.016 66.2491C288.45 66.2491 290.414 66.6333 291.908 67.4018C293.402 68.1277 294.555 69.1523 295.366 70.4756C296.22 71.7995 296.796 73.3575 297.096 75.1507C297.394 76.9438 297.544 78.8866 297.544 80.979V92.8924C297.544 95.7916 295.194 98.1423 292.294 98.1423H287.938V82.8997C287.938 82.0031 287.894 81.0856 287.809 80.1459C287.766 79.1643 287.574 78.2677 287.233 77.4567C286.934 76.6451 286.443 75.9832 285.76 75.4709C285.12 74.9585 284.18 74.7024 282.942 74.7024C281.704 74.7024 280.701 74.9375 279.932 75.4068C279.164 75.8341 278.566 76.4315 278.139 77.2C277.755 77.926 277.499 78.7585 277.371 79.6976C277.243 80.6373 277.178 81.6189 277.178 82.6436V92.8924C277.178 95.7916 274.828 98.1423 271.929 98.1423H267.572V72.2667Z" fill="#DC244C"/>
<path d="M326.186 69.453C326.186 72.352 323.836 74.7021 320.937 74.7021H317.733V85.0774C317.733 85.931 317.776 86.721 317.861 87.4465C317.946 88.1299 318.139 88.7273 318.437 89.2396C318.736 89.752 319.185 90.1577 319.782 90.4569C320.423 90.7131 321.255 90.8407 322.28 90.8407C322.792 90.8407 323.454 90.7982 324.265 90.7126C325.119 90.5845 325.76 90.3289 326.186 89.9446V94.5241C326.186 96.5793 324.899 98.4911 322.856 98.7178C321.703 98.8459 320.572 98.91 319.462 98.91C317.84 98.91 316.345 98.7394 314.979 98.3976C313.613 98.0564 312.417 97.5226 311.393 96.7971C310.368 96.0286 309.557 95.0465 308.959 93.8507C308.404 92.6554 308.126 91.2039 308.126 89.4963V74.7021H301.978V72.2664C301.978 69.3675 304.329 67.0173 307.228 67.0173H308.126V63.0446C308.126 60.1455 310.477 57.7953 313.376 57.7953H317.733V67.0173H326.186V69.453Z" fill="#DC244C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M143.483 105.538L141.888 61.5569L138.999 49.9617L158.282 52.0031V105.205L146.503 112.004L143.483 105.538Z" fill="#24386C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M158.281 52L146.501 58.8031L122.193 53.4709L93.7396 65.0556L88.9991 52L106.317 42L123.64 32L140.958 42L158.281 52Z" fill="#7589BE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M89 52L100.78 58.8031L107.608 79.1107L130.664 97.558L123.641 112L106.318 101.999L89 91.9995V52Z" fill="#B2BFE8"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M131.45 86.8871L123.641 98.4V112.001L134.722 105.607L140.432 97.0814" fill="#24386C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M123.646 84.8031L112.56 65.6089L114.947 59.2472L124.025 54.846L134.722 65.6092L123.646 84.8031Z" fill="#7589BE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M112.56 65.6073L123.641 72.001V84.7989L113.392 85.2399L107.193 77.3239L112.56 65.6073Z" fill="#B2BFE8"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M123.641 72L134.722 65.6068L142.264 78.1643L133.137 85.705L123.641 84.7983V72Z" fill="#24386C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M134.722 105.606L146.502 112.001V58.8037L135.069 52.2052L123.641 45.6068L112.208 52.2052L100.78 58.8037V85.2021L112.208 91.8005L123.641 98.3995L134.722 92V105.606ZM134.722 78.3989L123.641 84.7979L112.56 78.3989V65.6063L123.641 59.2073L134.722 65.6063V78.3989Z" fill="#DC244C"/>
<path d="M123.646 98.4042V84.8011L112.622 78.4567V92.0373L123.646 98.4042Z" fill="url(#paint0_linear_53_1404)"/>
</g>
<g clip-path="url(#clip1_53_1404)">
<path d="M632.831 92.892C632.831 95.7911 630.481 98.1413 627.582 98.1413H623.994V94.0426H623.865C623.481 94.5977 622.969 95.174 622.328 95.7717C621.731 96.3268 621.005 96.8391 620.151 97.3087C619.34 97.7784 618.422 98.1626 617.397 98.4615C616.415 98.7603 615.391 98.9098 614.323 98.9098C612.018 98.9098 609.926 98.5255 608.047 97.757C606.169 96.9458 604.546 95.8358 603.18 94.4269C601.857 92.9753 600.832 91.2675 600.106 89.3036C599.38 87.3396 599.017 85.1836 599.017 82.8354C599.017 80.658 599.338 78.5873 599.978 76.6234C600.661 74.6168 601.6 72.845 602.796 71.308C604.034 69.771 605.528 68.5542 607.279 67.6576C609.029 66.7183 611.015 66.2487 613.235 66.2487C615.241 66.2487 617.098 66.5689 618.806 67.2093C620.557 67.807 621.987 68.8531 623.097 70.3474H623.225V54.9753C623.225 52.0762 625.575 49.7261 628.474 49.7261H632.831V92.892ZM623.994 82.5792C623.994 80.2311 623.31 78.3312 621.944 76.8796C620.621 75.428 618.742 74.7022 616.309 74.7022C613.875 74.7022 611.975 75.428 610.609 76.8796C609.285 78.3312 608.624 80.2311 608.624 82.5792C608.624 84.9274 609.285 86.8273 610.609 88.2789C611.975 89.7305 613.875 90.4563 616.309 90.4563C618.742 90.4563 620.621 89.7305 621.944 88.2789C623.31 86.8273 623.994 84.9274 623.994 82.5792Z" fill="#DC244C"/>
<path d="M639.049 72.2665C639.049 69.3674 641.4 67.0172 644.299 67.0172H648.656V72.0124H648.784C649.808 70.0912 651.025 68.6609 652.434 67.7217C653.843 66.7397 655.615 66.2487 657.749 66.2487C658.305 66.2487 658.86 66.2701 659.415 66.3127C659.97 66.3554 660.482 66.4408 660.952 66.5689V75.3426C660.268 75.1291 659.585 74.9797 658.902 74.8943C658.262 74.7662 657.579 74.7022 656.853 74.7022C655.017 74.7022 653.565 74.9583 652.498 75.4707C651.431 75.983 650.598 76.7088 650 77.6481C649.445 78.5446 649.083 79.6333 648.912 80.9142C648.741 82.195 648.656 83.6039 648.656 85.1409V92.892C648.656 95.7911 646.305 98.1413 643.406 98.1413H639.049V72.2665Z" fill="#DC244C"/>
<path d="M684.252 94.2348H684.124C683.056 95.8998 681.626 97.0953 679.833 97.8211C678.083 98.5469 676.225 98.9098 674.261 98.9098C672.81 98.9098 671.401 98.6963 670.035 98.2694C668.711 97.8851 667.537 97.2874 666.512 96.4762C665.488 95.665 664.677 94.6617 664.079 93.4663C663.481 92.2708 663.182 90.8833 663.182 89.3036C663.182 87.5104 663.502 85.9948 664.143 84.7566C664.826 83.5185 665.723 82.4939 666.833 81.6827C667.985 80.8715 669.288 80.2524 670.739 79.8255C672.191 79.3558 673.685 79.0143 675.222 78.8008C676.802 78.5873 678.36 78.4592 679.897 78.4166C681.477 78.3739 682.928 78.3525 684.252 78.3525C684.252 76.6447 683.633 75.2999 682.395 74.3179C681.199 73.2933 679.769 72.7809 678.104 72.7809C676.524 72.7809 675.073 73.1225 673.749 73.8056C672.468 74.446 671.316 75.3426 670.291 76.4953L665.168 71.2439C666.961 69.5789 669.053 68.3407 671.444 67.5295C673.834 66.6756 676.311 66.2487 678.872 66.2487C681.69 66.2487 683.996 66.6116 685.789 67.3374C687.625 68.0205 689.076 69.0452 690.144 70.4114C691.254 71.7776 692.022 73.464 692.449 75.4707C692.876 77.4346 693.09 79.7187 693.09 82.3231V92.892C693.09 95.7911 690.739 98.1413 687.84 98.1413H684.252V94.2348ZM681.882 84.5005C681.157 84.5005 680.239 84.5432 679.129 84.6286C678.061 84.6713 677.015 84.842 675.991 85.1409C675.009 85.4398 674.155 85.888 673.429 86.4858C672.746 87.0835 672.404 87.916 672.404 88.9834C672.404 90.1361 672.895 90.99 673.877 91.545C674.859 92.1 675.884 92.3776 676.951 92.3776C677.89 92.3776 678.787 92.2495 679.641 91.9933C680.537 91.7371 681.327 91.3742 682.01 90.9046C682.694 90.435 683.227 89.8372 683.611 89.1115C684.038 88.3856 684.252 87.5318 684.252 86.5498V84.5005H681.882Z" fill="#DC244C"/>
<path d="M699.757 72.2665C699.757 69.3674 702.107 67.0172 705.006 67.0172H708.979V71.2439H709.107C709.406 70.6462 709.833 70.0485 710.388 69.4508C710.943 68.8531 711.605 68.3194 712.373 67.8497C713.142 67.3801 714.017 66.9959 714.999 66.697C715.981 66.3981 717.048 66.2487 718.201 66.2487C720.634 66.2487 722.598 66.633 724.093 67.4015C725.587 68.1273 726.74 69.1519 727.551 70.4754C728.405 71.799 728.981 73.3573 729.28 75.1504C729.579 76.9436 729.728 78.8862 729.728 80.9782V92.892C729.728 95.7911 727.378 98.1413 724.479 98.1413H720.122V82.8994C720.122 82.0029 720.079 81.0849 719.994 80.1457C719.951 79.1637 719.759 78.2671 719.418 77.4559C719.119 76.6447 718.628 75.983 717.945 75.4707C717.304 74.9583 716.365 74.7022 715.127 74.7022C713.889 74.7022 712.885 74.937 712.117 75.4066C711.348 75.8336 710.751 76.4313 710.324 77.1998C709.939 77.9256 709.683 78.7581 709.555 79.6974C709.427 80.6367 709.363 81.6186 709.363 82.6433V92.892C709.363 95.7911 707.013 98.1413 704.114 98.1413H699.757V72.2665Z" fill="#DC244C"/>
<path d="M758.369 69.4529C758.369 72.352 756.018 74.7022 753.119 74.7022H749.915V85.0769C749.915 85.9307 749.958 86.7206 750.043 87.4464C750.129 88.1295 750.321 88.7272 750.62 89.2395C750.919 89.7519 751.367 90.1575 751.965 90.4563C752.605 90.7125 753.438 90.8406 754.462 90.8406C754.975 90.8406 755.636 90.7979 756.447 90.7125C757.301 90.5844 757.942 90.3282 758.369 89.944V94.5236C758.369 96.5789 757.081 98.4907 755.039 98.7176C753.886 98.8457 752.754 98.9098 751.644 98.9098C750.022 98.9098 748.528 98.739 747.161 98.3974C745.795 98.0559 744.6 97.5222 743.575 96.7964C742.55 96.0279 741.739 95.0459 741.142 93.8505C740.587 92.6551 740.309 91.2035 740.309 89.4957V74.7022H734.161V72.2665C734.161 69.3674 736.511 67.0172 739.41 67.0172H740.309V63.0445C740.309 60.1454 742.659 57.7953 745.558 57.7953H749.915V67.0172H758.369V69.4529Z" fill="#DC244C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M555.827 32L538.504 42L521.186 51.9999V91.9997L538.504 102L555.827 112L566.908 105.606L578.688 112L590.467 105.202V52.0001L573.145 42.0001L555.827 32Z" fill="#201D1D"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M578.688 85.2016V58.8036L590.467 52.0005V105.202L578.688 112V85.2016Z" fill="#7D8CB5"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M590.467 51.9999L578.688 58.803L567.255 52.2045L555.827 45.6064L544.394 52.2045L532.966 58.803L521.187 51.9999L538.504 42L555.827 32L573.145 42L590.467 51.9999Z" fill="#B2BFE8"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M521.186 51.9999L532.966 58.803V85.201L544.394 91.7995L555.827 98.398V111.999L538.504 101.999L521.186 91.999V51.9992" fill="#D9E2FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M566.908 91.9997L555.827 98.3988V112L566.908 105.606V91.9997Z" fill="#7D8CB5"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M555.827 71.9998L544.745 65.6063L555.827 59.2073L566.908 65.6063L555.827 71.9998Z" fill="#B2BFE8"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M544.745 65.6073L555.827 72.0007V84.7985L544.745 78.3998V65.6073Z" fill="#D9E2FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M555.827 71.9998L566.908 65.6063V78.3989L555.827 84.7975V71.9998Z" fill="#7D8CB5"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M566.908 105.605L578.688 111.999V58.803L567.255 52.2045L555.827 45.6064L544.394 52.2045L532.966 58.803V85.2011L544.394 91.7995L555.827 98.398L566.908 91.999V105.605ZM566.908 78.3979L555.827 84.7966L544.745 78.3979V65.6054L555.827 59.2064L566.908 65.6054V78.3979Z" fill="#DC244C"/>
<path d="M555.832 98.4042V84.801L544.808 78.4567V92.0373L555.832 98.4042Z" fill="url(#paint1_linear_53_1404)"/>
</g>
<defs>
<linearGradient id="paint0_linear_53_1404" x1="121.613" y1="87.4016" x2="110.628" y2="87.4016" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF3364"/>
<stop offset="1" stop-color="#C91540" stop-opacity="0"/>
</linearGradient>
<linearGradient id="paint1_linear_53_1404" x1="553.799" y1="87.4016" x2="542.815" y2="87.4016" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF3364"/>
<stop offset="1" stop-color="#C91540" stop-opacity="0"/>
</linearGradient>
<clipPath id="clip0_53_1404">
<rect width="237.186" height="80" fill="white" transform="translate(89 32)"/>
</clipPath>
<clipPath id="clip1_53_1404">
<rect width="237.186" height="80" fill="white" transform="translate(521.186 32)"/>
</clipPath>
</defs>
</svg>

'''
'''--- frontend/public/logoFavicon.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_315_1851)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.6432 29.4152L23.0051 11.8227L21.8495 7.18463L29.5629 8.0012V29.282L24.8511 32.0014L23.6432 29.4152Z" fill="#24386C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.5624 7.99999L24.8506 10.7212L15.1271 8.58834L3.74592 13.2222L1.84973 7.99999L8.77676 4L15.7059 0L22.6331 4L29.5624 7.99999Z" fill="#7589BE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1.8501 7.99997L6.5619 10.7212L9.29324 18.8443L18.5155 26.2231L15.7065 31.9999L8.77733 27.9997L1.8501 23.9997V7.99997Z" fill="#B2BFE8"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.8302 21.9548L15.7064 26.56V32.0004L20.139 29.4429L22.4228 26.0325" fill="#24386C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.7084 21.1212L11.2739 13.4435L12.2291 10.8989L15.8601 9.13837L20.139 13.4437L15.7084 21.1212Z" fill="#7589BE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M11.274 13.4429L15.7065 16.0004V21.1196L11.607 21.2959L9.1272 18.1295L11.274 13.4429Z" fill="#B2BFE8"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.7064 16L20.139 13.4427L23.1557 18.4657L19.5051 21.4819L15.7064 21.1193V16Z" fill="#24386C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M20.139 29.4425L24.8508 32.0001V10.7214L20.2776 8.08206L15.7065 5.44269L11.1333 8.08206L6.56213 10.7214V21.2808L11.1333 23.9201L15.7065 26.5597L20.139 23.9999V29.4425ZM20.139 18.5595L15.7065 21.1191L11.2739 18.5595V13.4425L15.7065 10.8829L20.139 13.4425V18.5595Z" fill="#DC244C"/>
<path d="M15.7084 26.5616V21.1204L11.299 18.5826V24.0149L15.7084 26.5616Z" fill="url(#paint0_linear_315_1851)"/>
</g>
<defs>
<linearGradient id="paint0_linear_315_1851" x1="14.8954" y1="22.1606" x2="10.5015" y2="22.1606" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF3364"/>
<stop offset="1" stop-color="#C91540" stop-opacity="0"/>
</linearGradient>
<clipPath id="clip0_315_1851">
<rect width="27.6" height="32" fill="white" transform="translate(1.8501)"/>
</clipPath>
</defs>
</svg>

'''
'''--- frontend/public/workflow.svg ---
<svg width="504" height="160" viewBox="0 0 504 160" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.5" y="0.5" width="503" height="159" fill="#F2F6FF"/>
<rect x="81.5" y="65.5" width="91" height="28" rx="14" fill="white"/>
<path d="M102 78.1647C102 78.7775 102.121 79.3844 102.355 79.9506C102.59 80.5168 102.933 81.0312 103.367 81.4645C103.8 81.8979 104.315 82.2416 104.881 82.4762C105.447 82.7107 106.054 82.8314 106.667 82.8314C107.28 82.8314 107.886 82.7107 108.453 82.4762C109.019 82.2416 109.533 81.8979 109.966 81.4645C110.4 81.0312 110.744 80.5168 110.978 79.9506C111.213 79.3844 111.333 78.7775 111.333 78.1647C111.333 77.5519 111.213 76.945 110.978 76.3789C110.744 75.8127 110.4 75.2982 109.966 74.8649C109.533 74.4315 109.019 74.0878 108.453 73.8533C107.886 73.6188 107.28 73.498 106.667 73.498C106.054 73.498 105.447 73.6188 104.881 73.8533C104.315 74.0878 103.8 74.4315 103.367 74.8649C102.933 75.2982 102.59 75.8127 102.355 76.3789C102.121 76.945 102 77.5519 102 78.1647Z" stroke="#102252" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M114 85.498L110 81.498" stroke="#102252" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M124.833 74.0469V84H123.534V74.0469H124.833ZM128.032 74.0469V75.127H120.342V74.0469H128.032ZM135.832 82.9268V84H130.562V82.9268H135.832ZM130.828 74.0469V84H129.509V74.0469H130.828ZM135.135 78.3262V79.3994H130.562V78.3262H135.135ZM135.764 74.0469V75.127H130.562V74.0469H135.764ZM138.32 74.0469L140.713 77.8613L143.105 74.0469H144.644L141.499 78.9756L144.719 84H143.167L140.713 80.1104L138.259 84H136.707L139.927 78.9756L136.782 74.0469H138.32ZM149.921 74.0469V84H148.622V74.0469H149.921ZM153.12 74.0469V75.127H145.43V74.0469H153.12Z" fill="#102252"/>
<rect x="81.5" y="65.5" width="91" height="28" rx="14" stroke="#AEBDE6"/>
<circle opacity="0.8" cx="127" cy="29" r="5" fill="#DC244C"/>
<path d="M129.22 43C129.496 43 129.691 42.6618 129.553 42.4226L127.333 38.5774C127.195 38.3382 126.805 38.3382 126.667 38.5774L124.447 42.4226C124.309 42.6618 124.504 43 124.78 43H129.22ZM126.5 40.875C126.5 41.1511 126.724 41.375 127 41.375C127.276 41.375 127.5 41.1511 127.5 40.875H126.5ZM127.5 46.625C127.5 46.3489 127.276 46.125 127 46.125C126.724 46.125 126.5 46.3489 126.5 46.625H127.5ZM126.5 52.375C126.5 52.6511 126.724 52.875 127 52.875C127.276 52.875 127.5 52.6511 127.5 52.375H126.5ZM127.5 58.125C127.5 57.8489 127.276 57.625 127 57.625C126.724 57.625 126.5 57.8489 126.5 58.125H127.5ZM126.5 46.625V52.375H127.5V46.625H126.5ZM126.5 58.125V61H127.5V58.125H126.5Z" fill="#8B9CCC"/>
<circle opacity="0.8" cx="54" cy="80" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="127" cy="131" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="199" cy="80" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="170" cy="46" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="84" cy="46" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="170" cy="113" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="84" cy="113" r="5" fill="#06153D"/>
<rect x="333.5" y="65.5" width="91" height="28" rx="14" fill="white"/>
<path d="M344.5 78.1647C344.5 78.7775 344.621 79.3844 344.855 79.9506C345.09 80.5168 345.433 81.0312 345.867 81.4645C346.3 81.8979 346.815 82.2416 347.381 82.4762C347.947 82.7107 348.554 82.8314 349.167 82.8314C349.78 82.8314 350.386 82.7107 350.953 82.4762C351.519 82.2416 352.033 81.8979 352.466 81.4645C352.9 81.0312 353.244 80.5168 353.478 79.9506C353.713 79.3844 353.833 78.7775 353.833 78.1647C353.833 77.5519 353.713 76.945 353.478 76.3789C353.244 75.8127 352.9 75.2982 352.466 74.8649C352.033 74.4315 351.519 74.0878 350.953 73.8533C350.386 73.6188 349.78 73.498 349.167 73.498C348.554 73.498 347.947 73.6188 347.381 73.8533C346.815 74.0878 346.3 74.4315 345.867 74.8649C345.433 75.2982 345.09 75.8127 344.855 76.3789C344.621 76.945 344.5 77.5519 344.5 78.1647Z" stroke="#102252" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M356.5 85.498L352.5 81.498" stroke="#102252" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M371.312 74.0469V84H369.985L364.975 76.3232V84H363.655V74.0469H364.975L370.006 81.7441V74.0469H371.312ZM379.973 82.9268V84H374.702V82.9268H379.973ZM374.969 74.0469V84H373.649V74.0469H374.969ZM379.275 78.3262V79.3994H374.702V78.3262H379.275ZM379.904 74.0469V75.127H374.702V74.0469H379.904ZM387.301 74.0469H388.613V80.7803C388.613 81.5277 388.447 82.1497 388.114 82.6465C387.782 83.1432 387.34 83.5169 386.788 83.7676C386.241 84.0137 385.646 84.1367 385.004 84.1367C384.329 84.1367 383.719 84.0137 383.172 83.7676C382.63 83.5169 382.199 83.1432 381.88 82.6465C381.565 82.1497 381.408 81.5277 381.408 80.7803V74.0469H382.714V80.7803C382.714 81.2998 382.81 81.7282 383.001 82.0654C383.192 82.4027 383.459 82.6533 383.801 82.8174C384.147 82.9814 384.548 83.0635 385.004 83.0635C385.464 83.0635 385.865 82.9814 386.207 82.8174C386.553 82.6533 386.822 82.4027 387.014 82.0654C387.205 81.7282 387.301 81.2998 387.301 80.7803V74.0469ZM390.685 74.0469H393.979C394.727 74.0469 395.358 74.1608 395.873 74.3887C396.393 74.6165 396.787 74.9538 397.056 75.4004C397.329 75.8424 397.466 76.387 397.466 77.0342C397.466 77.4899 397.372 77.9069 397.186 78.2852C397.003 78.6589 396.739 78.9779 396.393 79.2422C396.051 79.502 395.641 79.6956 395.162 79.8232L394.793 79.9668H391.696L391.683 78.8936H394.021C394.494 78.8936 394.889 78.8115 395.203 78.6475C395.518 78.4788 395.755 78.2533 395.914 77.9707C396.074 77.6882 396.153 77.376 396.153 77.0342C396.153 76.6514 396.078 76.3164 395.928 76.0293C395.777 75.7422 395.54 75.5212 395.217 75.3662C394.898 75.2067 394.485 75.127 393.979 75.127H392.004V84H390.685V74.0469ZM396.502 84L394.082 79.4883L395.456 79.4814L397.91 83.918V84H396.502ZM402.996 74.9287L399.701 84H398.354L402.148 74.0469H403.017L402.996 74.9287ZM405.758 84L402.456 74.9287L402.436 74.0469H403.304L407.111 84H405.758ZM405.587 80.3154V81.3955H399.995V80.3154H405.587ZM414.48 82.9268V84H409.504V82.9268H414.48ZM409.764 74.0469V84H408.444V74.0469H409.764Z" fill="#102252"/>
<rect x="333.5" y="65.5" width="91" height="28" rx="14" stroke="#AEBDE6"/>
<circle opacity="0.8" cx="296" cy="80" r="5" fill="#DC244C"/>
<path d="M310 77.7799C310 77.5038 309.662 77.3085 309.423 77.4466L305.577 79.6667C305.338 79.8047 305.338 80.1953 305.577 80.3333L309.423 82.5534C309.662 82.6915 310 82.4962 310 82.2201V77.7799ZM308 80.5C308.276 80.5 308.5 80.2761 308.5 80C308.5 79.7239 308.276 79.5 308 79.5V80.5ZM314 79.5C313.724 79.5 313.5 79.7239 313.5 80C313.5 80.2761 313.724 80.5 314 80.5V79.5ZM320 80.5C320.276 80.5 320.5 80.2761 320.5 80C320.5 79.7239 320.276 79.5 320 79.5V80.5ZM326 79.5C325.724 79.5 325.5 79.7239 325.5 80C325.5 80.2761 325.724 80.5 326 80.5V79.5ZM314 80.5H320V79.5H314V80.5ZM326 80.5H329V79.5H326V80.5Z" fill="#8B9CCC"/>
<circle opacity="0.8" cx="336" cy="46" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="422" cy="46" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="422" cy="113" r="5" fill="#DC244C"/>
<path d="M408 115.22C408 115.496 408.338 115.691 408.577 115.553L412.423 113.333C412.662 113.195 412.662 112.805 412.423 112.667L408.577 110.447C408.338 110.309 408 110.504 408 110.78V115.22ZM379.5 98C379.5 97.7239 379.276 97.5 379 97.5C378.724 97.5 378.5 97.7239 378.5 98H379.5ZM378.795 101.024C378.849 101.295 379.112 101.472 379.383 101.418C379.653 101.364 379.83 101.101 379.776 100.83L378.795 101.024ZM381.942 106.056C381.788 105.827 381.478 105.765 381.248 105.919C381.019 106.072 380.957 106.383 381.111 106.612L381.942 106.056ZM385.388 110.889C385.617 111.043 385.928 110.981 386.081 110.752C386.235 110.522 386.173 110.212 385.944 110.058L385.388 110.889ZM391.17 112.224C390.899 112.17 390.636 112.347 390.582 112.617C390.528 112.888 390.705 113.151 390.976 113.205L391.17 112.224ZM396.375 113.5C396.651 113.5 396.875 113.276 396.875 113C396.875 112.724 396.651 112.5 396.375 112.5V113.5ZM401.125 112.5C400.849 112.5 400.625 112.724 400.625 113C400.625 113.276 400.849 113.5 401.125 113.5V112.5ZM405.875 113.5C406.151 113.5 406.375 113.276 406.375 113C406.375 112.724 406.151 112.5 405.875 112.5V113.5ZM410.625 112.5C410.349 112.5 410.125 112.724 410.125 113C410.125 113.276 410.349 113.5 410.625 113.5V112.5ZM378.5 98C378.5 99.0345 378.601 100.046 378.795 101.024L379.776 100.83C379.595 99.9154 379.5 98.969 379.5 98H378.5ZM381.111 106.612C382.243 108.302 383.698 109.757 385.388 110.889L385.944 110.058C384.362 108.999 383.001 107.638 381.942 106.056L381.111 106.612ZM390.976 113.205C391.954 113.399 392.965 113.5 394 113.5V112.5C393.031 112.5 392.085 112.405 391.17 112.224L390.976 113.205ZM394 113.5H396.375V112.5H394V113.5ZM401.125 113.5H405.875V112.5H401.125V113.5Z" fill="#8B9CCC"/>
<circle opacity="0.8" cx="336" cy="113" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="379" cy="29" r="5" fill="#DC244C"/>
<path d="M381.22 43C381.496 43 381.691 42.6618 381.553 42.4226L379.333 38.5774C379.195 38.3382 378.805 38.3382 378.667 38.5774L376.447 42.4226C376.309 42.6618 376.504 43 376.78 43H381.22ZM378.5 40.875C378.5 41.1511 378.724 41.375 379 41.375C379.276 41.375 379.5 41.1511 379.5 40.875H378.5ZM379.5 46.625C379.5 46.3489 379.276 46.125 379 46.125C378.724 46.125 378.5 46.3489 378.5 46.625H379.5ZM378.5 52.375C378.5 52.6511 378.724 52.875 379 52.875C379.276 52.875 379.5 52.6511 379.5 52.375H378.5ZM379.5 58.125C379.5 57.8489 379.276 57.625 379 57.625C378.724 57.625 378.5 57.8489 378.5 58.125H379.5ZM378.5 46.625V52.375H379.5V46.625H378.5ZM378.5 58.125V61H379.5V58.125H378.5Z" fill="#8B9CCC"/>
<circle opacity="0.8" cx="462" cy="80" r="5" fill="#06153D"/>
<circle opacity="0.8" cx="379" cy="131" r="5" fill="#06153D"/>
<rect x="252" width="1" height="160" fill="#DCE4FA"/>
<rect x="0.5" y="0.5" width="503" height="159" stroke="#DCE4FA"/>
</svg>

'''
'''--- frontend/src/App.tsx ---
import Home from "./pages/Home";
import ThemeProvider from "@/theme/ThemeProvider";

function App() {
  return (
    <ThemeProvider>
      <Home />
    </ThemeProvider>
  );
}

export default App;

'''
'''--- frontend/src/api/axios.ts ---
import axios from 'axios';

const baseURL =  '/';

const instance = axios.create({ baseURL, validateStatus: () => true });

instance.interceptors.request.use(
	(request) => {
		return request;
	},
	(error) => {
		return Promise.reject(error);
	},
);

export const Axios = () => instance;

'''
'''--- frontend/src/api/constants.ts ---
const API_V1 = 'api/';

export const SEARCH_URL = `${API_V1}search`;
'''
'''--- frontend/src/api/search.ts ---
import { Axios } from "./axios";
import { SEARCH_URL } from "./constants";

export type SearchRequest = {
    query: string;
    neural?: boolean;
}

export const getSearchResult = (searchRequest:SearchRequest) => {
    const params = {
        q: searchRequest.query,
        neural: searchRequest.neural
    }
    return Axios().get(SEARCH_URL, { params });
};

'''
'''--- frontend/src/components/CustomHeader/index.tsx ---
import {
  createStyles,
  Header as MantineHeader,
  Group,
  ActionIcon,
  Container,
  rem,
  Tooltip,
  Button,
  Modal,
  Text,
  Title,
  Image,
} from "@mantine/core";
import { IconBrandGithub, IconBook2 } from "@tabler/icons-react";
import { Logo } from "../Logo";
import { useDisclosure } from "@mantine/hooks";

const useStyles = createStyles((theme) => ({
  inner: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    height: rem(56),

    [theme.fn.smallerThan("sm")]: {
      justifyContent: "flex-start",
    },
  },

  links: {
    width: rem(260),
    [theme.fn.smallerThan("sm")]: {
      width: "auto",
      marginLeft: "auto",
    },
  },
  link: {
    transition: "transform .3s ease-in-out",
    "&:hover ": {
      transform: "scale(1.3)",
    },
  },
  modalBtn: {
    textAlign: "center",
    fontFamily: "Roboto",
    fontSize: "1rem",
    fontStyle: "normal",
    fontWeight: 400,
    lineHeight: "1rem",
    textDecorationLine: "underline",
  },
  description: {
    ":not(:first-of-type)": {
      paddingTop: "1rem",
    },
    paddingBottom: "1rem",
    textAlign: "center",
    color: theme.colors.Neutral[6],
    fontSize: theme.other.paragraph.sizes.P14.fontSize,
    lineHeight: theme.other.paragraph.sizes.P14.lineHeight,
    fontWeight: theme.other.paragraph.sizes.P14.fontWeight,
  },
  modalHeader: {
    color: theme.colors.Neutral[8],
    fontSize: "2rem",
    fontWeight: 700,
    lineHeight: "2.5rem",
    letterSpacing: "0em",
    textAlign: "center",
    width: "100%",
  },
  highlight: {
    color: theme.colors[theme.primaryColor][2],
  },
  subHeading: {
    fontSize: "1.125rem",
    fontWeight: 600,
    lineHeight: "1.6875rem",
    letterSpacing: "0em",
    textAlign: "center",
    width: "100%",
    paddingTop: "1rem",
    color: theme.colors.Neutral[8],
  },
  modalBtnInner: {
    width: "200px",
    marginTop: "2rem",
  },
}));

export function CustomHeader() {
  const { classes } = useStyles();
  const [opened, { open, close }] = useDisclosure(false);

  return (
    <MantineHeader
      height={56}
      bg={"Neutral.0"}
      fixed
      sx={{
        zIndex: 100,
      }}
    >
      <Container className={classes.inner}>
        <Logo size={35} />

        <Group spacing={10} className={classes.links} position="right" noWrap>
          <Button
            color="Neutral.6"
            variant="subtle"
            className={classes.modalBtn}
            onClick={open}
          >
            How it works?
          </Button>

          <Tooltip label="View Code" position="bottom" withArrow>
            <ActionIcon
              size="lg"
              radius="xs"
              color="Neutral.8"
              variant="filled"
              component="a"
              href="https://github.com/qdrant/qdrant_demo"
              target="_blank"
              className={classes.link}
            >
              <IconBrandGithub size="1.1rem" stroke={1.5} />
            </ActionIcon>
          </Tooltip>
          <Tooltip label="View Docs" position="bottom" withArrow>
            <ActionIcon
              size="lg"
              radius="xs"
              color="Neutral.8"
              variant="filled"
              component="a"
              href="https://github.com/qdrant/qdrant_demo/blob/master/README.md"
              target="_blank"
              className={classes.link}
            >
              <IconBook2 size="1.1rem" stroke={1.5} />
            </ActionIcon>
          </Tooltip>
        </Group>
      </Container>
      <Modal opened={opened} onClose={close} centered size={"lg"}>
        <Modal.Header
          sx={{
            flexDirection: "column",
          }}
        >
          <Title className={classes.modalHeader}>
            How does{" "}
            <Text component="span" className={classes.highlight} inherit>
              Semantic search
            </Text>{" "}
            work?
          </Title>
          <Text className={classes.subHeading}>
            This demo uses short descriptions of startups to perform a semantic
            search.
          </Text>
        </Modal.Header>
        <Modal.Body
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <Text size="lg" color="dimmed" className={classes.description}>
            Each startup description is converted into a vector using a
            pre-trained SentenceTransformer model and uploaded to the Qdrant
            vector search engine. You can turn neural search on and off to
            compare the result with regular full-text search. Try to use startup
            description to find similar ones.
          </Text>

          <Image src="/workflow.svg" />
          <Text size="lg" color="dimmed" className={classes.description}>
            You will discover that given a short query - a full-text search
            provides more precise results but lower recall when a neural search
            may find close and fuzzy matches. For similarity search and longer
            queries - full-text search struggles to catch the meaning of the
            query and return noisy results, while neural search finds better and
            semantically closer results.
          </Text>
          <Button
            className={classes.modalBtnInner}
            radius={30}
            size={"md"}
            variant="filled"
            color="Primary.2"
            onClick={close}
          >
            Get started
          </Button>
        </Modal.Body>
      </Modal>
    </MantineHeader>
  );
}

'''
'''--- frontend/src/components/DemoSearch/index.tsx ---
import { Box, Button, Text, createStyles } from "@mantine/core";

import { IconPointerSearch } from "@tabler/icons-react";

const useStyles = createStyles((theme) => ({
  wrapper: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    margin: "0 auto",
    padding: theme.spacing.md,
    gap: theme.spacing.sm,
    [theme.fn.smallerThan("sm")]: {
      flexDirection: "column",
    },
  },

  demoBtn: {
    borderColor: theme.colors.Neutral[2],
    color: theme.colors.Neutral[6],
    fontWeight: 400,
    fontSize: 14,
    lineHeight: 21,
  },

  demoText: {
    fontWeight: 400,
    fontSize: 16,
    color: theme.colors.Neutral[6],
  },
}));

type DemoSearchProps = {
  handleDemoSearch: (query: string) => void;
};

export default function DemoSearch({ handleDemoSearch }: DemoSearchProps) {
  const { classes } = useStyles();
  return (
    <Box className={classes.wrapper}>
      <Text className={classes.demoText}>Try this:</Text>
      <Button
        variant="outline"
        color="Primary.2"
        radius={"lg"}
        leftIcon={<IconPointerSearch size={"1.3rem"} />}
        className={classes.demoBtn}
        onClick={() => handleDemoSearch("Qdrant")}
      >
        Qdrant
      </Button>
      <Button
        variant="outline"
        radius={"lg"}
        color="Primary.2"
        leftIcon={<IconPointerSearch size={"1.3rem"} />}
        className={classes.demoBtn}
        onClick={() => handleDemoSearch("Wooden furniture")}
      >
        Wooden furniture
      </Button>
      <Button
        variant="outline"
        color="Primary.2"
        radius={"lg"}
        leftIcon={<IconPointerSearch size={"1.3rem"} />}
        className={classes.demoBtn}
        onClick={() => handleDemoSearch("Milk Company")}
      >
        Milk Company
      </Button>
    </Box>
  );
}

'''
'''--- frontend/src/components/Logo/index.tsx ---
import { rem } from "@mantine/core";

export interface LogoProps extends React.ComponentPropsWithoutRef<"svg"> {
  size?: number | string;
}

export function Logo({ size, ...others }: LogoProps) {
  return (
    <svg
      {...others}
      height={rem(size)}
      viewBox="0 0 238 80"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_1_202)">
        <path
          d="M111.648 60.8924C111.648 63.7916 109.298 66.1422 106.399 66.1422H102.81V62.0436H102.682C102.298 62.5984 101.786 63.1748 101.145 63.7722C100.547 64.3275 99.822 64.8399 98.968 65.3097C98.1569 65.779 97.2388 66.1632 96.2142 66.4625C95.232 66.7611 94.2073 66.9102 93.1401 66.9102C90.8346 66.9102 88.7428 66.526 86.864 65.7575C84.9853 64.9464 83.3632 63.8362 81.9968 62.4273C80.6735 60.9758 79.6488 59.2682 78.9228 57.3045C78.1968 55.3401 77.8341 53.1842 77.8341 50.8362C77.8341 48.6588 78.1543 46.5879 78.7947 44.6236C79.4777 42.6173 80.4173 40.8451 81.6126 39.3081C82.8509 37.7714 84.3449 36.5546 86.0955 35.658C87.8462 34.7187 89.8315 34.2491 92.0514 34.2491C94.0583 34.2491 95.9155 34.5693 97.6231 35.2097C99.3737 35.8074 100.804 36.8534 101.914 38.348H102.042V22.9758C102.042 20.0767 104.392 17.7265 107.291 17.7265H111.648V60.8924ZM102.81 50.5795C102.81 48.2315 102.128 46.3318 100.761 44.8798C99.4378 43.4283 97.559 42.7024 95.1254 42.7024C92.6918 42.7024 90.7921 43.4283 89.4257 44.8798C88.1023 46.3318 87.4404 48.2315 87.4404 50.5795C87.4404 52.9281 88.1023 54.8278 89.4257 56.2793C90.7921 57.7312 92.6918 58.4572 95.1254 58.4572C97.559 58.4572 99.4378 57.7312 100.761 56.2793C102.128 54.8278 102.81 52.9281 102.81 50.5795Z"
          fill="#DC244C"
        />
        <path
          d="M117.863 40.2667C117.863 37.3678 120.214 35.0176 123.113 35.0176H127.47V40.0126H127.598C128.623 38.0916 129.839 36.6613 131.248 35.722C132.657 34.74 134.429 34.2491 136.564 34.2491C137.119 34.2491 137.673 34.2704 138.229 34.3131C138.784 34.3558 139.296 34.4412 139.766 34.5693V43.343C139.082 43.1294 138.399 42.9798 137.717 42.8942C137.076 42.7661 136.393 42.7021 135.667 42.7021C133.831 42.7021 132.38 42.9583 131.312 43.4706C130.245 43.9829 129.412 44.7089 128.815 45.648C128.259 46.5446 127.897 47.6333 127.726 48.9142C127.555 50.1955 127.47 51.6039 127.47 53.1409V60.8921C127.47 63.7913 125.12 66.142 122.22 66.142H117.863V40.2667Z"
          fill="#DC244C"
        />
        <path
          d="M163.066 62.2362H162.938C161.87 63.9013 160.44 65.0966 158.647 65.8226C156.897 66.548 155.039 66.9108 153.075 66.9108C151.624 66.9108 150.215 66.6976 148.848 66.2709C147.525 65.8866 146.351 65.2887 145.326 64.4777C144.301 63.6661 143.49 62.663 142.892 61.4672C142.295 60.2719 141.996 58.8845 141.996 57.305C141.996 55.5118 142.316 53.9958 142.956 52.758C143.64 51.5197 144.536 50.495 145.646 49.684C146.799 48.8724 148.101 48.2535 149.553 47.8268C151.005 47.3569 152.499 47.0152 154.036 46.8016C155.616 46.5884 157.174 46.4604 158.711 46.4173C160.291 46.3748 161.742 46.3538 163.066 46.3538C163.066 44.6457 162.447 43.3008 161.208 42.3186C160.013 41.294 158.583 40.7816 156.918 40.7816C155.338 40.7816 153.887 41.1234 152.563 41.8063C151.282 42.4472 150.129 43.3438 149.104 44.4961L143.981 39.2446C145.774 37.5798 147.867 36.3416 150.257 35.5304C152.648 34.6765 155.124 34.2496 157.686 34.2496C160.504 34.2496 162.809 34.6125 164.603 35.3383C166.439 36.0214 167.89 37.0461 168.957 38.4121C170.068 39.7785 170.836 41.4651 171.263 43.4714C171.69 45.4357 171.903 47.7197 171.903 50.3239V60.8934C171.903 63.7921 169.553 66.1428 166.654 66.1428H163.066V62.2362ZM160.696 52.5013C159.971 52.5013 159.052 52.5444 157.942 52.6294C156.875 52.6724 155.829 52.843 154.804 53.1417C153.823 53.4409 152.968 53.8892 152.243 54.4866C151.56 55.0845 151.218 55.9171 151.218 56.9848C151.218 58.1375 151.709 58.9911 152.691 59.5459C153.673 60.1013 154.698 60.3785 155.765 60.3785C156.704 60.3785 157.601 60.2504 158.455 59.9942C159.351 59.7381 160.141 59.3753 160.824 58.9055C161.508 58.4362 162.041 57.8383 162.425 57.1123C162.852 56.3869 163.066 55.5328 163.066 54.5512V52.5013H160.696Z"
          fill="#DC244C"
        />
        <path
          d="M178.572 40.2667C178.572 37.3678 180.922 35.0176 183.821 35.0176H187.794V39.2441H187.922C188.221 38.6467 188.648 38.0489 189.203 37.4512C189.758 36.8534 190.42 36.3198 191.188 35.8501C191.957 35.3805 192.832 34.9962 193.814 34.6974C194.796 34.3985 195.863 34.2491 197.016 34.2491C199.45 34.2491 201.414 34.6333 202.908 35.4018C204.402 36.1277 205.555 37.1523 206.366 38.4756C207.22 39.7995 207.796 41.3575 208.096 43.1507C208.394 44.9438 208.544 46.8866 208.544 48.979V60.8924C208.544 63.7916 206.194 66.1423 203.294 66.1423H198.938V50.8997C198.938 50.0031 198.894 49.0856 198.809 48.1459C198.766 47.1643 198.574 46.2677 198.233 45.4567C197.934 44.6451 197.443 43.9832 196.76 43.4709C196.12 42.9585 195.18 42.7024 193.942 42.7024C192.704 42.7024 191.701 42.9375 190.932 43.4068C190.164 43.8341 189.566 44.4315 189.139 45.2C188.755 45.926 188.499 46.7585 188.371 47.6976C188.243 48.6373 188.178 49.6189 188.178 50.6436V60.8924C188.178 63.7916 185.828 66.1423 182.929 66.1423H178.572V40.2667Z"
          fill="#DC244C"
        />
        <path
          d="M237.186 37.453C237.186 40.352 234.836 42.7021 231.937 42.7021H228.733V53.0774C228.733 53.931 228.776 54.721 228.861 55.4465C228.946 56.1299 229.139 56.7273 229.437 57.2396C229.736 57.752 230.185 58.1577 230.782 58.4569C231.423 58.7131 232.255 58.8407 233.28 58.8407C233.792 58.8407 234.454 58.7982 235.265 58.7126C236.119 58.5845 236.76 58.3289 237.186 57.9446V62.5241C237.186 64.5793 235.899 66.4911 233.856 66.7178C232.703 66.8459 231.572 66.91 230.462 66.91C228.84 66.91 227.345 66.7394 225.979 66.3976C224.613 66.0564 223.417 65.5226 222.393 64.7971C221.368 64.0286 220.557 63.0465 219.959 61.8507C219.404 60.6554 219.126 59.2039 219.126 57.4963V42.7021H212.978V40.2664C212.978 37.3675 215.329 35.0173 218.228 35.0173H219.126V31.0446C219.126 28.1455 221.477 25.7953 224.376 25.7953H228.733V35.0173H237.186V37.453Z"
          fill="#DC244C"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M54.4829 73.538L52.8877 29.5569L49.9987 17.9617L69.2821 20.0031V73.2052L57.5026 80.0036L54.4829 73.538Z"
          fill="#24386C"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M69.2808 20L57.5013 26.8031L33.1926 21.4709L4.73962 33.0556L-0.000854492 20L17.3167 9.99998L34.6396 -1.52588e-05L51.9577 9.99998L69.2808 20Z"
          fill="#7589BE"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M0 20L11.7795 26.8031L18.6079 47.1107L41.6635 65.558L34.6409 80L17.3181 69.9995L0 59.9995V20Z"
          fill="#B2BFE8"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M42.4503 54.8871L34.6409 66.4V80.001L45.7222 73.6073L51.4319 65.0814"
          fill="#24386C"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M34.6457 52.8031L23.5596 33.6089L25.9474 27.2472L35.0251 22.846L45.7222 33.6092L34.6457 52.8031Z"
          fill="#7589BE"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M23.5596 33.6073L34.6409 40.001V52.7989L24.3921 53.2399L18.1926 45.3239L23.5596 33.6073Z"
          fill="#B2BFE8"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M34.6409 40L45.7222 33.6068L53.264 46.1643L44.1375 53.705L34.6409 52.7983V40Z"
          fill="#24386C"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M45.7223 73.6063L57.5018 80.0005V26.8037L46.0687 20.2052L34.6409 13.6068L23.2078 20.2052L11.78 26.8037V53.2021L23.2078 59.8005L34.6409 66.3995L45.7223 60V73.6063ZM45.7223 46.3989L34.6409 52.7979L23.5596 46.3989V33.6063L34.6409 27.2073L45.7223 33.6063V46.3989Z"
          fill="#DC244C"
        />
        <path
          d="M34.6457 66.4042V52.8011L23.6221 46.4567V60.0373L34.6457 66.4042Z"
          fill="url(#paint0_linear_1_202)"
        />
      </g>
      <defs>
        <linearGradient
          id="paint0_linear_1_202"
          x1="32.6131"
          y1="55.4016"
          x2="21.6284"
          y2="55.4016"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#FF3364" />
          <stop offset="1" stopColor="#C91540" stopOpacity="0" />
        </linearGradient>
        <clipPath id="clip0_1_202">
          <rect width="237.186" height="80" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
}

'''
'''--- frontend/src/components/MainSection/index.tsx ---
import {
  Title,
  Text,
  Button,
  Container,
  TextInput,
  Loader,
  Box,
  Grid,
  Image,
  SegmentedControl,
} from "@mantine/core";
import { IconSearch } from "@tabler/icons-react";
import { useStyles } from "./style";
import useMountedState from "@/hooks/useMountedState";
import { useGetSearchResult } from "@/hooks/useGetSearchResult";
import { getHotkeyHandler } from "@mantine/hooks";
import { StartupCard } from "../StartupCard";
import DemoSearch from "../DemoSearch";

export function Main() {
  const { classes } = useStyles();
  const [query, setQuery] = useMountedState("");
  const { data, error, loading, getSearch, resetData } = useGetSearchResult();
  const [isNeural, setIsNeural] = useMountedState(true);

  const handleSubmit = () => {
    if (query) {
      getSearch(query, isNeural);
    }
  };

  const onClickFindSimilar = (data: string) => {
    if (data) {
      resetData();
      setQuery(data);
      getSearch(data, isNeural);
    }
  };

  return (
    <Container className={classes.wrapper} size={1400}>
      <div className={classes.inner}>
        <Title className={classes.title}>
          Startup{" "}
          <Text component="span" className={classes.highlight} inherit>
            Semantic search
          </Text>{" "}
          with Qdrant
        </Title>
        <Text size="lg" color="dimmed" className={classes.description}>
          This demo uses short descriptions of startups to perform a semantic
          search.
        </Text>
        <Container p={0} size={600} className={classes.controls}>
          <SegmentedControl
            radius={30}
            data={[
              { label: "Neural", value: "neural" },
              { label: "Text", value: "text" },
            ]}
            onChange={(value) => {
              setIsNeural(value === "neural");
              resetData();
              query && getSearch(query, value === "neural");
            }}
            size="md"
            color="Primary.2"
            className={classes.control}
            value={isNeural ? "neural" : "text"}
          />
          <TextInput
            radius={30}
            size="md"
            icon={<IconSearch color="#102252" />}
            placeholder="Enter a query"
            rightSection={
              <Button
                className={classes.inputRightSection}
                radius={30}
                size={"md"}
                variant="filled"
                color="Primary.2"
                onClick={handleSubmit}
              >
                Search
              </Button>
            }
            rightSectionWidth={"6rem"}
            className={classes.inputArea}
            value={query}
            required
            onChange={(event) => setQuery(event.currentTarget.value)}
            onKeyDown={getHotkeyHandler([["Enter", handleSubmit]])}
          />
        </Container>

        <DemoSearch handleDemoSearch={onClickFindSimilar} />
        <Container className={classes.viewResult}>
          {loading ? (
            <Box
              sx={{
                display: "flex",
                justifyContent: "center",
              }}
            >
              <Loader size="xl" color="Primary.2" variant="bars" />
            </Box>
          ) : error ? (
            <Box
              sx={{
                width: "100%",
                display: "flex",
                justifyContent: "center",
                flexDirection: "column",
                alignItems: "center",
              }}
            >
              <Image maw={240} src="./error.gif" alt="No results found." />

              <Text size="lg" color="dimmed" className={classes.description}>
                Error: {error}
              </Text>
            </Box>
          ) : data?.result ? (
            <Grid mt={"md"}>
              {data.result.length > 0 ? (
                data.result.map((item) => (
                  <Grid.Col span={12} key={item.uuid}>
                    <StartupCard
                      name={item.name}
                      images={item.logo_url}
                      alt={item.name}
                      description={item.document}
                      link={item.homepage_url}
                      city={
                        item.city ??
                        item.region ??
                        item.country_code ??
                        "Unknown"
                      }
                      onClickFindSimilar={onClickFindSimilar}
                      Index={item.uuid}
                    />
                  </Grid.Col>
                ))
              ) : (
                <Box
                  sx={{
                    width: "100%",
                    display: "flex",
                    justifyContent: "center",
                    flexDirection: "column",
                    alignItems: "center",
                  }}
                >
                  <Image
                    maw={240}
                    src="./NoResult.gif"
                    alt="No results found."
                  />

                  <Text
                    size="lg"
                    color="dimmed"
                    className={classes.description}
                  >
                    No results found. Try to use another query.
                  </Text>
                </Box>
              )}
            </Grid>
          ) : (
            <Box
              sx={{
                width: "100%",
                display: "flex",
                justifyContent: "center",
                flexDirection: "column",
                alignItems: "center",
              }}
            >
              <Image maw={240} src="./home.gif" alt="No results found." />

              <Text size="lg" color="dimmed" className={classes.description}>
                Enter a query to start searching.
              </Text>
            </Box>
          )}
        </Container>
      </div>
    </Container>
  );
}

'''
'''--- frontend/src/components/MainSection/style.tsx ---
import { createStyles, rem } from "@mantine/core";

export const useStyles = createStyles((theme) => ({
  wrapper: {
    position: "relative",
    paddingTop: rem(120),
    paddingBottom: rem(80),

    [theme.fn.smallerThan("sm")]: {
      paddingTop: rem(80),
      paddingBottom: rem(60),
    },
  },

  inner: {
    position: "relative",
    zIndex: 1,
  },
  title: {
    color: theme.colors.Neutral[7],
    textAlign: "center",
    fontWeight: 700,
    fontSize: "2.5rem",
    fontStyle: "normal",
    lineHeight: "3rem",
  },

  highlight: {
    color: theme.colors[theme.primaryColor][2],
  },

  description: {
    paddingTop: theme.spacing.xs,
    textAlign: "center",
    color: theme.colors.Neutral[6],
    fontSize: theme.other.paragraph.sizes.P18.fontSize,
    lineHeight: theme.other.paragraph.sizes.P18.lineHeight,
    fontWeight: theme.other.paragraph.sizes.P18.fontWeight,
  },

  controls: {
    textAlign: "center",
  },

  control: {
    backgroundColor: theme.colors.Neutral[1],
    marginTop: theme.spacing.xl,
    border: `1px solid ${theme.colors.Neutral[2]}`,
  },
  inputRightSection: {},
  inputArea: {
    marginTop: theme.spacing.xl,
    "& .mantine-TextInput-input": {
      border: `1px solid ${theme.colors.Neutral[2]}`,
      color: theme.colors.Neutral[6],
      "::-webkit-input-placeholder": {
        color: theme.colors.Neutral[6],
      },
    },
  },
  viewResult: {
    paddingTop: theme.spacing.md,
  },
}));

'''
'''--- frontend/src/components/StartupCard/index.tsx ---
import {
  Image,
  Text,
  Badge,
  Button,
  Group,
  createStyles,
  Grid,
} from "@mantine/core";
import { IconExternalLink } from "@tabler/icons-react";
import DOMPurify from "dompurify";

type StartupCardProps = {
  Index: string;
  name: string;
  images: string;
  alt: string;
  description: string;
  link: string;
  city: string;
  onClickFindSimilar: (data: string) => void;
};

const useStyles = createStyles((theme) => ({
  card: {
    backgroundColor:
      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
    borderRadius: theme.radius.md,
    boxShadow: theme.shadows.md,
    padding: theme.spacing.md,
    marginBottom: theme.spacing.md,
  },

  title: {
    fontWeight: 700,
    fontFamily: `${theme.fontFamily}`,
    lineHeight: 1.2,
    color:theme.colors.Neutral[8]
  },

  body: {},
  imageBox: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  },
  btnBox: {
    display: "flex",
  },
}));

export function StartupCard({
  images,
  city,
  name,
  description,
  link,
  onClickFindSimilar,
}: StartupCardProps) {
  const { classes } = useStyles();
  return (
    <Grid className={classes.card}>
      <Grid.Col xs={2} className={classes.imageBox}>
        <Image
          src={images}
          withPlaceholder
          alt={"No results found."}
          radius="md"
          sx={{
            "& .mantine-Image-image": {
              border: "1px solid #e3e3e3",
            },
          }}
        />
      </Grid.Col>
      <Grid.Col xs={10} >
        <Grid sx={{
            display:"flex",
            alignContent:"center",
            height:"100%"
    
        }}>
          <Grid.Col sm={6} md={7} >
            <Badge color="blue" variant="light">
              {city}
            </Badge>
            <Text
              className={classes.title}
              size="lg"
              weight={700}
              style={{ marginTop: 10 }}
            >
              {name}
            </Text>
            <Text
              size="sm"
              weight={400}
              style={{ marginTop: 10 }}
              color="Neutral.6"
              dangerouslySetInnerHTML={{
                __html: DOMPurify.sanitize(
                  description.length > 200
                    ? description.substring(0, 180) + "..."
                    : description
                ),
              }}
            />
          </Grid.Col>
          <Grid.Col sm={6} md={5} className={classes.btnBox}>
            <Group noWrap position="center" h={"100%"}>
              <Button
                variant="subtle"
                radius={"xl"}
                color="Neutral.8"
                onClick={() => onClickFindSimilar(description)}
              >
                Find Similar
              </Button>
              <Button
                variant="outline"
                color="Neutral.8"
                href={link}
                target="_blank"
                component="a"
                radius={"xl"}
                sx={{
                  border: "1px solid #DCE4FA",
                }}
                rightIcon={<IconExternalLink />}
              >
                View Website
              </Button>
            </Group>
          </Grid.Col>
        </Grid>
      </Grid.Col>
    </Grid>
  );
}

'''
'''--- frontend/src/hooks/useGetSearchResult.ts ---
import { getSearchResult } from '@/api/search';
import { StatusCodes } from 'http-status-codes';
import useMountedState from './useMountedState';

export type searchResponse = {
	result: {
		cb_url: string;
		city: string;
		combined_stock_symbols: string;
		country_code: string;
		domain: string;
		facebook_url: string;
		homepage_url: string;
		linkedin_url: string;
		logo_url: string;
		name: string;
		primary_role: string;
		region: string;
		document: string;
		twitter_url: string;
		type: string;
		uuid: string;
	}[];
};
export const useGetSearchResult = () => {
	const [data, setData] = useMountedState<searchResponse | null>(null);
	const [error, setError] = useMountedState<string | null>(null);
	const [loading, setLoading] = useMountedState<boolean>(false);

	const getSearch = async (query: string,neural?:boolean) => {
		try {
			setLoading(true);
			setError(null);
			const res = await getSearchResult({ query,neural });

			switch (res.status) {
				case StatusCodes.OK: {
					const searchRes = res.data;
					setData(searchRes);
					break;
				}
				default: {
					setError('Failed to get Search Result');
				}
			}
		} catch {
			setError('Failed to get Search Result');
		} finally {
			setLoading(false);
		}
	};

	const resetData = () => {
		setData(null);
	};

	return { data, error, loading, getSearch, resetData };
};

'''
'''--- frontend/src/hooks/useMountedRef.ts ---
import { useRef, useEffect } from 'react';

const useMountedRef = () => {
	const mounted = useRef(false);

	useEffect(() => {
		mounted.current = true;

		return () => {
			mounted.current = false;
		};
	}, []);

	return mounted;
};

export default useMountedRef;

'''
'''--- frontend/src/hooks/useMountedState.ts ---
import { useState, useCallback, SetStateAction } from 'react';

import useMountedRef from './useMountedRef';

const useMountedState = <T>(value: T | (() => T)): [T, (newState: SetStateAction<T>) => void] => {
	const mountedRef = useMountedRef();
	const [state, setState] = useState<T>(value);

	const setMountedState = useCallback(
		(newValue: SetStateAction<T>) => {
			if (mountedRef.current) {
				setState(newValue);
			}
		},
		[mountedRef],
	);

	return [state, setMountedState];
};

export default useMountedState;

'''
'''--- frontend/src/main.tsx ---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

'''
'''--- frontend/src/pages/Home/index.tsx ---
import { Main } from "@/components/MainSection";
import { CustomHeader } from "@/components/CustomHeader";
import { Box } from "@mantine/core";

export default function Home() {
  return (
    <Box>
      <CustomHeader />
      <Main />
    </Box>
  );
}

'''
'''--- frontend/src/theme/ThemeProvider.tsx ---
import { MantineProvider, createEmotionCache } from '@mantine/core';

import type { FC, ReactNode } from 'react';
import theme  from './index';

const myCache = createEmotionCache({ key: 'mantine' });

type MantineProps = {
	children?: ReactNode;
};

const Mantine: FC<MantineProps> = (props) => {
	const { children } = props;

	return (
		<MantineProvider withGlobalStyles withNormalizeCSS theme={theme} emotionCache={myCache}>
        {children}
		</MantineProvider>
	);
};

export default Mantine;

'''
'''--- frontend/src/theme/index.tsx ---
import { CSSObject, MantineThemeOverride } from "@mantine/core";
import { heights, sizing, widths } from "./sizing";
import { Tuple, DefaultMantineColor } from "@mantine/core";

type ExtendedCustomColors =
  | "Primary"
  | "P500"
  | "secondary"
  | "blue"  
  | "purple"
  | "teal"
  | "Neutral"
  | "N500"
  | "Error"
  | "E500"
  | "Success"
  | "S500"
  | "Warning"
  | "W500"
  | "pink"
  | DefaultMantineColor;

declare module "@mantine/core" {
  export interface MantineThemeColorsOverride {
    colors: Record<ExtendedCustomColors, Tuple<string, 10>>;
  }
}

const globalStyles = (): CSSObject => {
  return {
    "#root": {
      overflow: "auto",
      display: "block",
      width: widths.screen,
      height: heights.screen,
      backgroundColor: "#F2F6FF",
      fontFamily: "Roboto,Roboto Mono",
    },
  };
};

const myTheme: MantineThemeOverride = {
  globalStyles,
  defaultRadius: "md",
  fontFamily: "Roboto,Roboto Mono",
  colors: {
    Primary: ["#FFC2D6", "#F5587F", "#DC244C", "#A31030", "#660223"],
    P500: ["#DC244C"],
    secondary: ["#724CEF", "#148BF4", "#009999"],
    blue: [
      "#E7F5FF",
      "#D0EBFF",
      "#A5D8FF",
      "#74C0FC",
      "#4DABF7",
      "#339AF0",
      "#148BF4",
      "#228BE6",
      "#1C7ED6",
      "#1971C2",
    ],
    purple: ["#724CEF"],
    teal: ["#009999"],
    Neutral: [
      "#F2F6FF",
      "#DCE4FA",
      "#AEBDE5",
      "#8B9CCC",
      "#6A80BD",
      "#5069AD",
      "#39508F",
      "#1F3266",
      "#102252",
      "#06153D",
    ],
    N500: ["5069AD"],
    Error: ["#FED6D6", "#F03030", "#661414"],
    E500: ["#F03030"],
    Success: ["#D1FADF", "#12B765", "#085232"],
    S500: ["#12B765"],
    Warning: ["#FEE4C7", "#F5870A", "#662F0A"],
    W500: ["#F5870A"], 
    pink: [
      "#FFF0F6",
      "#FFDEEB",
      "#FCC2D7",
      "#FAA2C1",
      "#F783AC",
      "#F06595",
      "#DC244C",
      "#D6336C",
      "#C2255C",
      "#A61E4D",
    ],
  },
  primaryColor: "Primary",
  spacing: {
    xxs: "0.2rem",
  },
  other: {
    sizing,
    heights,
    widths,
    fontWeights: {
      thin: 100,
      extraLight: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900,
    },
    subheading: {
      sizes: {
        SH18: {
          fontSize: "1.125rem",
          lineHeight: "1.5rem",
        },
        SH12: {
          fontSize: "0.75rem",
          lineHeight: "1.125rem",
        },
      },
    },
    paragraph: {
      sizes: {
        P24: {
          fontSize: "1.5rem",
          lineHeight: "2rem",
        },
        P18: {
          fontSize: "1.125rem",
          lineHeight: "1.6875rem",
          fontWeight: 400,
        },
        P16: {
          fontSize: "1rem",
          lineHeight: "1.5rem",
        },
        P14: {
          fontSize: "0.875rem",
          lineHeight: "1.3125rem",
          fontWeight: 400,
        },
        P12: {
          fontSize: "0.75rem",
          lineHeight: "1.125rem",
        },
      },
    },
  },
};

export default myTheme;

'''
'''--- frontend/src/theme/sizing.ts ---
export const sizing = {
	'0': '0px',
	px: '1px',
	'0.5': '0.125rem',
	'1': '0.25rem',
	'1.5': '0.375rem',
	'2': '0.5rem',
	'2.5': '0.625rem',
	'3': '0.75rem',
	'3.5': '0.875rem',
	'4': '1rem',
	'5': '1.25rem',
	'6': '1.5rem',
	'7': '1.75rem',
	'8': '2rem',
	'9': '2.25rem',
	'10': '2.5rem',
	'11': '2.75rem',
	'12': '3rem',
	'14': '3.5rem',
	'16': '4rem',
	'20': '5rem',
	'24': '6rem',
	'28': '7rem',
	'32': '8rem',
	'36': '9rem',
	'40': '10rem',
	'44': '11rem',
	'48': '12rem',
	'52': '13rem',
	'56': '14rem',
	'60': '15rem',
	'64': '16rem',
	'72': '18rem',
	'80': '20rem',
	'96': '24rem',
	auto: 'auto',
	'1/2': '50%',
	'1/3': '33.333333%',
	'2/3': '66.666667%',
	'1/4': '25%',
	'2/4': '50%',
	'3/4': '75%',
	'1/5': '20%',
	'2/5': '40%',
	'3/5': '60%',
	'4/5': '80%',
	'1/6': '16.666667%',
	'2/6': '33.333333%',
	'3/6': '50%',
	'4/6': '66.666667%',
	'5/6': '83.333333%',
	full: '100%',
	min: 'min-content',
	max: 'max-content',
	fit: 'fit-content',
};

export const heights = {
	...sizing,
	screen: '100vh',
};

export const widths = {
	...sizing,
	'1/12': '8.333333%',
	'2/12': '16.666667%',
	'3/12': '25%',
	'4/12': '33.333333%',
	'5/12': '41.666667%',
	'6/12': '50%',
	'7/12': '58.333333%',
	'8/12': '66.666667%',
	'9/12': '75%',
	'10/12': '83.333333%',
	'11/12': '91.666667%',
	screen: '100vw',
};

'''
'''--- frontend/src/vite-env.d.ts ---
/// <reference types="vite/client" />

interface ImportMetaEnv {
	readonly VITE_QDRANT_DEMO_URL?: string;
}

interface ImportMeta {
	readonly env: ImportMetaEnv;
}

'''
'''--- frontend/tsconfig.json ---
{
	"compilerOptions": {
		"target": "ESNext",
		"lib": ["DOM", "DOM.Iterable", "ESNext"],
		"module": "ESNext",
		"skipLibCheck": true,
		"baseUrl": ".",
		"paths": {
			"@/*": ["src/*"],
		},

		/* Bundler mode */
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		"jsx": "react-jsx",

		/* Linting */
		"strict": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		"noFallthroughCasesInSwitch": true
	},
	"include": ["src"],
	"references": [{ "path": "./tsconfig.node.json" }]
}
'''
'''--- frontend/tsconfig.node.json ---
{
	"compilerOptions": {
		"composite": true,
		"skipLibCheck": true,
		"module": "ESNext",
		"moduleResolution": "bundler",
		"allowSyntheticDefaultImports": true
	},
	"include": ["vite.config.ts"]
}
'''
'''--- frontend/vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

export default defineConfig(() => {
  return {
    plugins: [react()],
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "./src"),
      },
    },
    server: {
      proxy: {
        "/api": {
          target: "http://0.0.0.0:8000/",
          changeOrigin: true,
        },
      },
    }
  };
});

'''
'''--- qdrant_demo/__init__.py ---

'''
'''--- qdrant_demo/config.py ---
import os

CODE_DIR = os.path.dirname(__file__)
ROOT_DIR = os.path.dirname(CODE_DIR)
DATA_DIR = os.path.join(ROOT_DIR, "data")
STATIC_DIR = os.path.join(ROOT_DIR, "static")

QDRANT_URL = os.environ.get("QDRANT_URL", "http://localhost:6333/")
QDRANT_API_KEY = os.environ.get("QDRANT_API_KEY", "")

COLLECTION_NAME = os.environ.get("COLLECTION_NAME", "text-demo")
EMBEDDINGS_MODEL = os.environ.get("EMBEDDINGS_MODEL", "sentence-transformers/all-MiniLM-L6-v2")

TEXT_FIELD_NAME = "document"

'''
'''--- qdrant_demo/init_collection_crunchbase.py ---
import os.path

import pandas as pd
from qdrant_client import QdrantClient, models
from tqdm import tqdm

from qdrant_demo.config import DATA_DIR, QDRANT_URL, QDRANT_API_KEY, COLLECTION_NAME, TEXT_FIELD_NAME, EMBEDDINGS_MODEL

# Define the CSV file path and NPY file path
csv_file_path = os.path.join(DATA_DIR, "organizations.csv")

def upload_embeddings():
    client = QdrantClient(
        url=QDRANT_URL,
        api_key=QDRANT_API_KEY,
    )

    client.set_model(EMBEDDINGS_MODEL)

    df = pd.read_csv(csv_file_path)
    documents = df['short_description'].tolist()
    df.drop(columns=['short_description'], inplace=True)
    metadata = df.to_dict('records')

    client.recreate_collection(
        collection_name=COLLECTION_NAME,
        vectors_config=client.get_fastembed_vector_params(on_disk=True),
        # Quantization is optional, but it can significantly reduce the memory usage
        quantization_config=models.ScalarQuantization(
            scalar=models.ScalarQuantizationConfig(
                type=models.ScalarType.INT8,
                quantile=0.99,
                always_ram=True
            )
        )
    )

    # Create a payload index for text field.
    # This index enables text search by the TEXT_FIELD_NAME field.
    client.create_payload_index(
        collection_name=COLLECTION_NAME,
        field_name=TEXT_FIELD_NAME,
        field_schema=models.TextIndexParams(
            type=models.TextIndexType.TEXT,
            tokenizer=models.TokenizerType.WORD,
            min_token_len=2,
            max_token_len=20,
            lowercase=True,
        )
    )

    client.add(
        collection_name=COLLECTION_NAME,
        documents=documents,
        metadata=metadata,
        ids=tqdm(range(len(documents))),
        parallel=6,
    )

if __name__ == '__main__':
    upload_embeddings()

'''
'''--- qdrant_demo/init_collection_startups.py ---
import json
import os.path

from qdrant_client import QdrantClient, models
from tqdm import tqdm

from qdrant_demo.config import DATA_DIR, QDRANT_URL, QDRANT_API_KEY, COLLECTION_NAME, TEXT_FIELD_NAME, EMBEDDINGS_MODEL

def upload_embeddings():
    client = QdrantClient(
        url=QDRANT_URL,
        api_key=QDRANT_API_KEY,
        prefer_grpc=True,
    )

    client.set_model(EMBEDDINGS_MODEL)

    payload_path = os.path.join(DATA_DIR, 'startups_demo.json')
    payload = []
    documents = []

    with open(payload_path) as fd:
        for line in fd:
            obj = json.loads(line)
            # Rename fields to unified schema
            documents.append(obj.pop('description'))
            obj["logo_url"] = obj.pop("images")
            obj["homepage_url"] = obj.pop("link")
            payload.append(obj)

    client.recreate_collection(
        collection_name=COLLECTION_NAME,
        vectors_config=client.get_fastembed_vector_params(on_disk=True),
        # Quantization is optional, but it can significantly reduce the memory usage
        quantization_config=models.ScalarQuantization(
            scalar=models.ScalarQuantizationConfig(
                type=models.ScalarType.INT8,
                quantile=0.99,
                always_ram=True
            )
        )
    )

    # Create a payload index for text field.
    # This index enables text search by the TEXT_FIELD_NAME field.
    client.create_payload_index(
        collection_name=COLLECTION_NAME,
        field_name=TEXT_FIELD_NAME,
        field_schema=models.TextIndexParams(
            type=models.TextIndexType.TEXT,
            tokenizer=models.TokenizerType.WORD,
            min_token_len=2,
            max_token_len=20,
            lowercase=True,
        )
    )

    client.add(
        collection_name=COLLECTION_NAME,
        documents=documents,
        metadata=payload,
        ids=tqdm(range(len(payload))),
        parallel=0,
    )

if __name__ == '__main__':
    upload_embeddings()

'''
'''--- qdrant_demo/neural_searcher.py ---
import time
from typing import List

from qdrant_client import QdrantClient
from qdrant_client.http.models.models import Filter

from qdrant_demo.config import QDRANT_URL, QDRANT_API_KEY, EMBEDDINGS_MODEL

class NeuralSearcher:

    def __init__(self, collection_name: str):
        self.collection_name = collection_name
        self.qdrant_client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY, prefer_grpc=True)
        self.qdrant_client.set_model(EMBEDDINGS_MODEL)

    def search(self, text: str, filter_: dict = None) -> List[dict]:
        start_time = time.time()
        hits = self.qdrant_client.query(
            collection_name=self.collection_name,
            query_text=text,
            query_filter=Filter(**filter_) if filter_ else None,
            limit=5
        )
        print(f"Search took {time.time() - start_time} seconds")
        return [hit.metadata for hit in hits]

'''
'''--- qdrant_demo/service.py ---
import os

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

from qdrant_demo.config import COLLECTION_NAME, STATIC_DIR
from qdrant_demo.neural_searcher import NeuralSearcher
from qdrant_demo.text_searcher import TextSearcher

from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

neural_searcher = NeuralSearcher(collection_name=COLLECTION_NAME)
text_searcher = TextSearcher(collection_name=COLLECTION_NAME)

@app.get("/api/search")
async def read_item(q: str, neural: bool = True):
    return {
        "result": neural_searcher.search(text=q)
        if neural else text_searcher.search(query=q)
    }

# Mount the static files directory once the search endpoint is defined
if os.path.exists(STATIC_DIR):
    app.mount("/", StaticFiles(directory=STATIC_DIR, html=True))

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)

'''
'''--- qdrant_demo/text_searcher.py ---
import os
import re

from qdrant_client import QdrantClient
from qdrant_client.models import Filter, FieldCondition, MatchText
from qdrant_demo.config import QDRANT_URL, QDRANT_API_KEY, TEXT_FIELD_NAME

class TextSearcher:
    def __init__(self, collection_name: str):
        self.highlight_field = TEXT_FIELD_NAME
        self.collection_name = collection_name
        self.qdrant_client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY, prefer_grpc=True)

    def highlight(self, record, query) -> dict:
        text = record[self.highlight_field]

        for word in query.lower().split():
            if len(word) > 4:
                pattern = re.compile(fr"(\b{re.escape(word)}?.?\b)", flags=re.IGNORECASE)
            else:
                pattern = re.compile(fr"(\b{re.escape(word)}\b)", flags=re.IGNORECASE)
            text = re.sub(pattern, r"<b>\1</b>", text)

        record[self.highlight_field] = text
        return record

    def search(self, query, top=5):
        hits = self.qdrant_client.scroll(
            collection_name=self.collection_name,
            scroll_filter=Filter(
                must=[
                    FieldCondition(
                        key=TEXT_FIELD_NAME,
                        match=MatchText(text=query),
                    )
                ]),
            with_payload=True,
            with_vectors=False,
            limit=top
        )
        return [self.highlight(hit.payload, query) for hit in hits[0]]

'''
'''--- sync.sh ---
#!/usr/bin/env bash

rsync -avP --exclude='venv' \
           --exclude='__pycache__' \
           --exclude='frontend' \
           --exclude='.idea' \
           . $1:./project/qdrant_demo/

'''